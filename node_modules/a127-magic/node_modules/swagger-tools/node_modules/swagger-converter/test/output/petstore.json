{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "Swagger Sample App",
        "description": "This is a sample server Petstore server.  You can find out more about Swagger \n    at <a href=\"http://swagger.wordnik.com\">http://swagger.wordnik.com</a> or on irc.freenode.net, #swagger.  For this sample,\n    you can use the api key \"special-key\" to test the authorization filters",
        "contact": {
            "email": "apiteam@wordnik.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "termsOfService": "http://helloreverb.com/terms/"
    },
    "paths": {
        "/pet": {
            "put": {
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "description": "",
                "summary": "Update an existing pet",
                "operationId": "updatePet",
                "produces": [
                    "application/json",
                    "application/xml",
                    "text/plain",
                    "text/html"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "Pet object that needs to be updated in the store",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    }
                ]
            }
        },
        "/pet/findByStatus": {
            "get": {
                "responses": {
                    "400": {
                        "description": "Invalid status value"
                    }
                },
                "description": "",
                "summary": "Finds Pets by status",
                "operationId": "findPetsByStatus",
                "produces": [
                    "application/json",
                    "application/xml",
                    "text/plain",
                    "text/html"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "Status values that need to be considered for filter",
                        "name": "status",
                        "required": true,
                        "type": "string"
                    }
                ]
            }
        },
        "/pet/findByTags": {
            "get": {
                "responses": {
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "description": "",
                "summary": "Finds Pets by tags",
                "operationId": "findPetsByTags",
                "produces": [
                    "application/json",
                    "application/xml",
                    "text/plain",
                    "text/html"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "Tags to filter by",
                        "name": "tags",
                        "required": true,
                        "type": "string"
                    }
                ]
            }
        },
        "/pet/{petId}": {
            "post": {
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "description": "",
                "summary": "Updates a pet in the store with form data",
                "operationId": "updatePetWithForm",
                "produces": [
                    "application/json",
                    "application/xml",
                    "text/plain",
                    "text/html"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "ID of pet that needs to be updated",
                        "name": "petId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "description": "Updated name of the pet",
                        "name": "name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "description": "Updated status of the pet",
                        "name": "status",
                        "required": false,
                        "type": "string"
                    }
                ]
            },
            "get": {
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                },
                "description": "",
                "summary": "Find pet by ID",
                "operationId": "getPetById",
                "produces": [
                    "application/json",
                    "application/xml",
                    "text/plain",
                    "text/html"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "ID of pet that needs to be fetched",
                        "name": "petId",
                        "required": true,
                        "type": "integer",
                        "default": -1,
                        "maximum": 100000,
                        "minimum": 1
                    }
                ]
            },
            "delete": {
                "responses": {
                    "400": {
                        "description": "Invalid pet value"
                    }
                },
                "description": "",
                "summary": "Deletes a pet",
                "operationId": "deletePet",
                "produces": [
                    "application/json",
                    "application/xml",
                    "text/plain",
                    "text/html"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "Pet id to delete",
                        "name": "petId",
                        "required": true,
                        "type": "string"
                    }
                ]
            },
            "patch": {
                "responses": {
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "description": "",
                "summary": "partial updates to a pet",
                "operationId": "partialUpdate",
                "produces": [
                    "application/json",
                    "application/xml",
                    "text/plain",
                    "text/html"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "ID of pet that needs to be fetched",
                        "name": "petId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "description": "Pet object that needs to be added to the store",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    }
                ]
            }
        },
        "/pet/uploadImage": {
            "post": {
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    }
                },
                "description": "",
                "summary": "uploads an image",
                "operationId": "uploadFile",
                "produces": [
                    "application/json",
                    "application/xml",
                    "text/plain",
                    "text/html"
                ],
                "parameters": [
                    {
                        "in": "formData",
                        "description": "Additional data to pass to server",
                        "name": "additionalMetadata",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "description": "file to upload",
                        "name": "file",
                        "required": false,
                        "type": "file"
                    }
                ]
            }
        },
        "/user/createWithArray": {
            "post": {
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    }
                },
                "description": "",
                "summary": "Creates list of users with given input array",
                "operationId": "createUsersWithArrayInput",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "List of user object",
                        "name": "body",
                        "required": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ]
            }
        },
        "/user/createWithList": {
            "post": {
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    }
                },
                "description": "",
                "summary": "Creates list of users with given list input",
                "operationId": "createUsersWithListInput",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "List of user object",
                        "name": "body",
                        "required": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ]
            }
        },
        "/user/{username}": {
            "put": {
                "responses": {
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "description": "",
                "summary": "Updated user",
                "operationId": "updateUser",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "name that need to be deleted",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "description": "Updated user object",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ]
            },
            "delete": {
                "responses": {
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "description": "",
                "summary": "Delete user",
                "operationId": "deleteUser",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "The name that needs to be deleted",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    }
                ]
            },
            "get": {
                "responses": {
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "description": "",
                "summary": "Get user by user name",
                "operationId": "getUserByName",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "The name that needs to be fetched. Use user1 for testing.",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    }
                ]
            }
        },
        "/user/login": {
            "get": {
                "responses": {
                    "400": {
                        "description": "Invalid username and password combination"
                    }
                },
                "description": "",
                "summary": "Logs user into the system",
                "operationId": "loginUser",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "description": "The user name for login",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "description": "The password for login in clear text",
                        "name": "password",
                        "required": true,
                        "type": "string"
                    }
                ]
            }
        },
        "/user/logout": {
            "get": {
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    }
                },
                "description": "",
                "summary": "Logs out current logged in user session",
                "operationId": "logoutUser",
                "produces": [
                    "application/json"
                ]
            }
        },
        "/user": {
            "post": {
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    }
                },
                "description": "",
                "summary": "Create user",
                "operationId": "createUser",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "Created user object",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ]
            }
        },
        "/store/order": {
            "post": {
                "responses": {
                    "400": {
                        "description": "Invalid order"
                    }
                },
                "description": "",
                "summary": "Place an order for a pet",
                "operationId": "placeOrder",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "description": "order placed for purchasing the pet",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    }
                ]
            }
        },
        "/store/order/{orderId}": {
            "delete": {
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                },
                "description": "",
                "summary": "Delete purchase order by ID",
                "operationId": "deleteOrder",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "ID of the order that needs to be deleted",
                        "name": "orderId",
                        "required": true,
                        "type": "string"
                    }
                ]
            },
            "get": {
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                },
                "description": "",
                "summary": "Find purchase order by ID",
                "operationId": "getOrderById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "description": "ID of pet that needs to be fetched",
                        "name": "orderId",
                        "required": true,
                        "type": "string"
                    }
                ]
            }
        }
    },
    "securityDefinitions": {
        "oauth2_implicit": {
            "type": "oauth2",
            "flow": "implicit",
            "authorizationUrl": "http://petstore.swagger.wordnik.com/api/oauth/dialog",
            "scopes": {
                "write:pets": "Modify pets in your account",
                "read:pets": "Read your pets"
            }
        },
        "oauth2_authorization_code": {
            "type": "oauth2",
            "flow": "accessCode",
            "authorizationUrl": "http://petstore.swagger.wordnik.com/api/oauth/requestToken",
            "tokenUrl": "http://petstore.swagger.wordnik.com/api/oauth/token",
            "scopes": {
                "write:pets": "Modify pets in your account",
                "read:pets": "Read your pets"
            }
        }
    },
    "host": "petstore.swagger.wordnik.com",
    "basePath": "/api",
    "schemes": [
        "http"
    ],
    "definitions": {
        "Tag": {
            "id": "Tag",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Pet": {
            "id": "Pet",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "unique identifier for the pet",
                    "minimum": 0,
                    "maximum": 100,
                    "default": -1
                },
                "category": {
                    "$ref": "#/definitions/Category"
                },
                "name": {
                    "type": "string"
                },
                "photoUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Tag"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "pet status in the store",
                    "enum": [
                        "available",
                        "pending",
                        "sold"
                    ]
                }
            }
        },
        "Category": {
            "id": "Category",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Animal": {
            "id": "Animal",
            "required": [
                "id",
                "type"
            ],
            "properties": {
                "id": {
                    "type": "long"
                },
                "type": {
                    "type": "string"
                }
            },
            "discriminator": "type"
        },
        "Cat": {
            "id": "Cat",
            "required": [
                "likesMilk"
            ],
            "properties": {
                "likesMilk": {
                    "type": "boolean"
                }
            },
            "allOf": [
                {
                    "$ref": "#/definitions/Animal"
                }
            ]
        },
        "User": {
            "id": "User",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "firstName": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "userStatus": {
                    "type": "integer",
                    "format": "int32",
                    "description": "User Status",
                    "enum": [
                        "1-registered",
                        "2-active",
                        "3-closed"
                    ]
                }
            }
        },
        "Order": {
            "id": "Order",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "petId": {
                    "type": "integer",
                    "format": "int64"
                },
                "quantity": {
                    "type": "integer",
                    "format": "int32"
                },
                "status": {
                    "type": "string",
                    "description": "Order Status",
                    "enum": [
                        "placed",
                        " approved",
                        " delivered"
                    ]
                },
                "shipDate": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        }
    }
}
