{
  "name": "spark-md5",
  "version": "0.0.5",
  "description": "Lightning fast normal and incremental md5 for javascript",
  "main": "spark-md5.js",
  "directories": {
    "test": "test"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:satazor/SparkMD5.git"
  },
  "keywords": [
    "md5",
    "fast",
    "spark",
    "incremental"
  ],
  "author": {
    "name": "AndreÃÅ Cruz",
    "email": "andremiguelcruz@msn.com"
  },
  "license": "WTFPL",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/satazor/SparkMD5/issues"
  },
  "readme": "# SparkMD5\n\nSparkMD5 is a fast md5 implementation of the MD5 algorithm.\nThis script is based in the JKM md5 library which is the\nfastest algorithm around (see: http://jsperf.com/md5-shootout/7).\nThis is most suitable for browser usage, because `nodejs` version might be faster.\n\nNOTE: Please disable Firebug while performing the test!\n      Firebug consumes a lot of memory and CPU and slows the test by a great margin.\n\n## Improvements over the JKM md5 library\n\n * Functionality wrapped in a closure\n * Object oriented library\n * Incremental md5 (see bellow)\n * Support for array buffers (typed arrays)\n * CommonJS (it can be used in node) and AMD integration\n * Validates using jshint\n\n\nIncremental md5 performs a lot better for hashing large ammounts of data, such as\nfiles. One could read files in chunks, using the FileReader & Blob's, and append\neach chunk for md5 hashing while keeping memory usage low. See example bellow.\n\n## Usage\n\n### Normal usage\n\n```js\nvar hexHash = SparkMD5.hash('Hi there');       // hex hash\nvar rawHash = SparkMD5.hash('Hi there', true); // OR raw hash\n```\n\n### Incremental usage\n\n```js\nvar spark = new SparkMD5();\nspark.append('Hi');\nspark.append(' there');\nvar hexHash = spark.end();                    // hex hash\nvar rawHash = spark.end(true);                // OR raw hash\n```\n\n### Hash a file incrementally\n\nNOTE: If you test the code bellow using the file:// protocol in chrome you must start the browser with -allow-file-access-from-files argument.\n      Please see: http://code.google.com/p/chromium/issues/detail?id=60889\n\n```js\ndocument.getElementById(\"file\").addEventListener(\"change\", function() {\n    var blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice,\n        file = this.files[0],\n        chunkSize = 2097152,                               // read in chunks of 2MB\n        chunks = Math.ceil(file.size / chunkSize),\n        currentChunk = 0,\n        spark = new SparkMD5.ArrayBuffer(),\n        frOnload = function(e) {\n            console.log(\"read chunk nr\", currentChunk + 1, \"of\", chunks);\n            spark.append(e.target.result);                 // append array buffer\n            currentChunk++;\n\n            if (currentChunk < chunks) {\n                loadNext();\n            }\n            else {\n               console.log(\"finished loading\");\n               console.info(\"computed hash\", spark.end()); // compute hash\n            }\n        },\n        frOnerror = function () {\n            console.warn(\"oops, something went wrong.\");\n        };\n\n    function loadNext() {\n        var fileReader = new FileReader();\n        fileReader.onload = frOnload;\n        fileReader.onerror = frOnerror;\n\n        var start = currentChunk * chunkSize,\n            end = ((start + chunkSize) >= file.size) ? file.size : start + chunkSize;\n\n        fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));\n    };\n\n    loadNext();\n});\n```\n\nYou can see some more examples in the test folder.\n\n## Documentation\n\n\n### SparkMD5 class\n\n#### SparkMD5#append(str)\n\nAppends a string, handling UTF8 automatically.\n\n#### SparkMD5#appendBinary(str)\n\nAppends a binary string.\n\n#### SparkMD5#end(raw)\n\nFinishes the computation of the md5, returning the hex result.\nIf `raw` is true, the raw result will be returned instead.\n\n#### SparkMD5#reset()\n\nResets the internal state of the computation.\n\n#### SparkMD5#destroy()\n\nReleases memory used by the incremental buffer and other aditional resources.\n\n#### SparkMD5.hash(str, raw)\n\nHashes a string directly, returning the hex result.\nIf `raw` is true, the raw result will be returned instead.\nNote that this function is `static`.\n\n#### SparkMD5.hashBinary(str, raw)\n\nHashes a binary string directly, returning the hex result.\nIf `raw` is true, the raw result will be returned instead.\nNote that this function is `static`.\n\n\n### SparkMD5.ArrayBuffer class\n\n#### SparkMD5.ArrayBuffer#append(arr)\n\nAppends an array buffer.\n\n#### SparkMD5.ArrayBuffer#end(raw)\n\nFinishes the computation of the md5, returning the hex result.\nIf `raw` is true, the raw result will be returned instead.\n\n#### SparkMD5.ArrayBuffer#reset()\n\nResets the internal state of the computation.\n\n#### SparkMD5.ArrayBuffer#destroy()\n\nReleases memory used by the incremental buffer and other aditional resources.\n\n#### SparkMD5.ArrayBuffer.hash(arr, raw)\n\nHashes an array buffer directly, returning the hex result.\nIf `raw` is true, the raw result will be returned instead.\nNote that this function is `static`.\n\n## Credits\n\nJoseph Myers (http://www.myersdaily.org/joseph/javascript/md5-text.html)\n",
  "_id": "spark-md5@0.0.5",
  "dist": {
    "shasum": "931da5e3b951d06527e9b7d90dfff578b6fcdc8e",
    "tarball": "http://registry.npmjs.org/spark-md5/-/spark-md5-0.0.5.tgz"
  },
  "_from": "spark-md5@0.0.5",
  "_npmVersion": "1.3.5",
  "_npmUser": {
    "name": "satazor",
    "email": "andremiguelcruz@msn.com"
  },
  "maintainers": [
    {
      "name": "satazor",
      "email": "andremiguelcruz@msn.com"
    }
  ],
  "_shasum": "931da5e3b951d06527e9b7d90dfff578b6fcdc8e",
  "_resolved": "https://registry.npmjs.org/spark-md5/-/spark-md5-0.0.5.tgz",
  "homepage": "https://github.com/satazor/SparkMD5"
}
